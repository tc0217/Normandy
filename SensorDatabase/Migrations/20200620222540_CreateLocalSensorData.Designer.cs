// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensorDatabase.Context;

namespace SensorDatabase.Migrations
{
    [DbContext(typeof(SensorDataContext))]
    [Migration("20200620222540_CreateLocalSensorData")]
    partial class CreateLocalSensorData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SensorDatabase.Device", b =>
                {
                    b.Property<int>("deviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("deviceName")
                        .HasColumnType("text");

                    b.Property<int?>("softwareID")
                        .HasColumnType("int");

                    b.Property<int?>("typeID")
                        .HasColumnType("int");

                    b.HasKey("deviceID");

                    b.HasIndex("softwareID");

                    b.HasIndex("typeID");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("SensorDatabase.SensorData", b =>
                {
                    b.Property<int>("dataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadTime")
                        .HasColumnType("datetime");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<int?>("deviceID")
                        .HasColumnType("int");

                    b.HasKey("dataID");

                    b.HasIndex("deviceID");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("SensorDatabase.SensorType", b =>
                {
                    b.Property<int>("typeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Units")
                        .HasColumnType("text");

                    b.Property<string>("typeName")
                        .HasColumnType("text");

                    b.HasKey("typeID");

                    b.ToTable("sensorTypes");
                });

            modelBuilder.Entity("SensorDatabase.Software", b =>
                {
                    b.Property<int>("softwareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Revision")
                        .HasColumnType("text");

                    b.Property<string>("SWName")
                        .HasColumnType("text");

                    b.HasKey("softwareID");

                    b.ToTable("softwares");
                });

            modelBuilder.Entity("SensorDatabase.Device", b =>
                {
                    b.HasOne("SensorDatabase.Software", "Software")
                        .WithMany()
                        .HasForeignKey("softwareID");

                    b.HasOne("SensorDatabase.SensorType", "Type")
                        .WithMany()
                        .HasForeignKey("typeID");
                });

            modelBuilder.Entity("SensorDatabase.SensorData", b =>
                {
                    b.HasOne("SensorDatabase.Device", "Device")
                        .WithMany()
                        .HasForeignKey("deviceID");
                });
#pragma warning restore 612, 618
        }
    }
}
